priority 2

# snippet class "typescript class"
# classzz ${1:`!p snip.rv = snip.basename`} ${2:extends ${3:OtherClass} }{
# 	$0
# }
# endsnippet

snippet ct "class constructor"
constructor(${1:params}) {$0}
endsnippet

snippet pct "class constructor"
private constructor(private${1: readonly} ${2:arg1}) {$0}

public static create(): `!p snip.rv = snip.basename` {}
endsnippet

snippet type "typescript type"
type $1 = {
    $0
};
endsnippet

snippet expt "" b
export type $1 = {
    $0
};
endsnippet

# snippet foo ""
# `!p snip.rv = snip.basename`
# endsnippet

global !p
def down_first_char(word):
  return word[0].lower() + word[1:]

def filename_1st_downcase():
	return down_first_char(snip.basename)

def private_const_part1(props):
    str = '    private constructor(\n'
    if props:
        for prop in props:
            str += '        private readonly _' + prop + ': string,\n'
        str += ') {}'
    return str

def private_const_part2(props):
    str = ''
    if props:
        for prop in props:
            str += '\n    public get ' + prop + '(): string {\n'
            str += '        return this._' + prop + ';\n'
            str += '    }\n'
    return str

def class_private_const(t):
    if t:
        str = 'export class ' + snip.basename + ' {\n'
        props = [x.strip() for x in t.split(',')]
        str += private_const_part1(props) + '\n' + private_const_part2(props)
        str += '}'
        return str
    return ':insert properties separeted by comma'
endglobal

snippet pcla " populate private constructor from array"
$1
`!p snip.rv=class_private_const(t[1])`
endsnippet

snippet	foo ""
`!p snip.rv = filename_1st_downcase()`
endsnippet

snippet dddl "typescript lambda"
import { `!p snip.rv = snip.basename`Event } from './events/`!p snip.rv = snip.basename`Event';
import { `!p snip.rv = snip.basename`Command } from '../../application/services/`!p snip.rv = snip.basename`Command';
import { `!p snip.rv = snip.basename`Handler } from '../../application/services/`!p snip.rv = snip.basename`Handler';
import { TYPES } from '../di/types';
import { container } from '../di/inversify.config';

export const handler = async (event: `!p snip.rv = snip.basename`Event) => {
    const `!p snip.rv = filename_1st_downcase()`Handler = container.get<`!p snip.rv = snip.basename`Handler>(TYPES.`!p snip.rv = snip.basename`Handler);

    const command = new `!p snip.rv = snip.basename`Command(${1:commandParameters});
    ${2:const ${4:handlerResult}: ${3:ResultType} = }await `!p snip.rv = filename_1st_downcase()`Handler.handle(command);

    return { $4$0 };
};
endsnippet

snippet jois "Joy string"
${1:name}: Joi
    .string()
    .min(${2:1})
    .max(${3:50})
    .required(),
endsnippet

snippet joisl "Joy string list of fixed strings"
${1:name}: Joi
    .string()
    .min(${2:1})
    .max(${3:50})
    .valid(${4:'STR1', 'STR2'})
    .error(new Error('${5:$1 must be either STR1, STR2}'))
    .required(),
endsnippet

snippet joio "Joy string"
${1:name}: Joi
    .object({
        $0
    })${2:.required()},
endsnippet

