priority 1

snippet notifysentry
Raven.capture_message("${1}", message: "${2}")
endsnippet

snippet each
ea { |${1:e}| ${0} }
endsnippet

snippet eachdo
ea do |${1:e}|
${0}
end
endsnippet

snippet find
find { |${1:e}| ${0} }
endsnippet

snippet finddo
find do |${1:e}|
${0}
end
endsnippet

snippet findall
find_all { |${1:e}| ${0} }
endsnippet

snippet findalldo
find_all do |${1:e}|
${0}
end
endsnippet

snippet all?
all? { |${1:e}| ${0} }
endsnippet

snippet any?
any? { |${1:e}| ${0} }
endsnippet

snippet >
-> { ${0} }
endsnippet

snippet >a
->(${1:args}) { ${0} }
endsnippet

snippet reject
reject { |${1:e}| ${0} }
endsnippet

snippet rejectdo
reject do |${1:e}|
${0}
end
endsnippet

# Testing
snippet desc
describe '${1:description}' do
${2}
end
endsnippet

snippet cont
context '${1:description}' do
${2}
end
endsnippet

snippet it
it { ${1} }
endsnippet

snippet itdo
it '${1:description}' do
${2}
end
endsnippet

snippet xit
xit '${1:description}' do
${2}
end
endsnippet


snippet bef
before do
	${1}
end
endsnippet

snippet let
let(:${1}) { ${2} }
endsnippet

snippet allow
allow(${1:object}).to receive(${2:message}) { ${3:return value} }
endsnippet

snippet exteq
it '${1}' do
	expect(${1}).to eq(${2})
end
endsnippet

snippet extb
it '${1}' do
	expect(${2}).to be_${3:present}
end
endsnippet

snippet exti
it '${1}' do
	expect(${2}).to include ${3}
end
endsnippet

snippet extcft
it '${1}' do
	expect{ ${2} }.to change(${3} ).from(${4}).to(${5})
end
endsnippet

snippet extcby
it '${1}' do
	expect{ ${2} }.to change( ${3} ).by(${4})
end
endsnippet

snippet extce
it '${1}' do
	expect(${2}).to contain_exactly(${3})
end
endsnippet

snippet allow_any_instance_of
allow_any_instance_of(
	${1}
).to receive(
	:${2}
).and_return(
	${3}
)
endsnippet

snippet add_index "add index in a migration" b
add_index :${1:table}, :${2:column}
endsnippet


snippet script "Main script" b
#!/usr/bin/env ruby
#
# Tips:
#
# require './lib/class' --> for your classes for example
# You can use ARGV for your 
# args = ARGV.map {|x| x.to_i}

$0
endsnippet

snippet exp_rspecfile "rspecfile"
require '${1:class_name_at_lib_directory}'

describe ${2:ClassName} do
	$0
end
endsnippet

snippet exp_controllerfile "rspec_controller_file" b
require 'rails_helper'

RSpec.describe ${1:ControllerClass}, type: :request do
#	before do
#		host! 'test.example.com'
#	end
#
#	def perform_request!
#		post '/xyz', :params => {x:x}, :headers => {x:x} 
#	end

	$0
end
endsnippet

snippet has_many_through "has many through" b
has_many :${1:destination_class}, :through => :${2:intermediate_model}
endsnippet

snippet exp_to_eq "expect to eq" b
expect(${1:subject}).to eq($2)
endsnippet

snippet do "do"
do
	$0
end
endsnippet
