snippet render
	render() {
		return (
			${1:<div />}
		);
	}
endsnippet

snippet "int " "interator" riA
${1:asdf}(${2:(c, i)} => ${$3})
endsnippet

snippet "fund " "let" riA
/**
	* ${3}
	*
	* @returns {${2}}
	*/
${1:functionName}() {
	${4}
}
endsnippet

# snippet "then" "then" riA
# then( ({json, status}) => {

# })
# endsnippet

# React
snippet rfc "React Functional Component" b
import React from 'react';
import PropTypes from 'prop-types';
import styles from './${2:$1}.css';

function ${1:`!v expand('%:t:r')`}({ $3 }) {
	return (
		<${5:div} className={styles.base}>
			$0
		</$5>
	);
}

$1.defaultProps = {$4};

$1.propTypes = {`!p
props = t[3]
if props:
  snip >> 1
  for prop in props.split(', '):
    snip += prop + ': PropTypes.any,'
`
};

export default $1;
endsnippet

snippet rsc "React Styled Component" b
import styled from 'styled-components';

const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
	$3
\`;

export default $1;
endsnippet

snippet pt "PropTypes Definition" b
${1:`!v expand('%:t:r')`.}propTypes = {
	${2:className}: ${3:PropTypes.string},
};
endsnippet

# Prop types
snippet  pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet   pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
	$2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
	$2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet

# Hooks
snippet us.s "useState" w
const [$1, set${1/\w+\s*/\u$0/g}] = useState(${3:''})${0:;}
endsnippet

snippet us.e "useEffect" w
useEffect(() => {
  $1
})${0:;}
endsnippet

snippet us.d "useDispatch" w
const dispatch = useDispatch();
endsnippet

snippet us.er "useEffect with return" w
useEffect(() => {
  $1
	return () => {
    $2
	};
})${0:;}
endsnippet

snippet us.c "useContext" w
const $1 = useContext($2)${0:;}
endsnippet

# Felipe

### Common javascript snippets ###
snippet log
console.log('${1:here}');
endsnippet

snippet req "const request" w
const ${1} = require('${1/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}');
endsnippet

snippet for "simple for"
for (let ${1:i} = ${2:0}; $1 < ${3:n}; $1${4:++}) {
	$5
}
endsnippet

snippet "im(pf|pof|porf|portf)" "import" br
import ${1} from '${2}';
endsnippet

snippet "i(mport|mp|m)?" "import" br
import '${1:./file.x}';
endsnippet


# snippet "let " "let" riA
# let ${1} = ${2};
# endsnippet

snippet "const " "const" brA
const ${1} = ${2};
endsnippet

snippet "let " "let" brA
let ${1} = ${2};
endsnippet

snippet => "inline arrow function" i
${1} => ${2}
endsnippet

snippet =>> "arrow function" iA
${1:args} => {
	return $3;
}${2:;}
endsnippet

snippet  "cla(ss|s)?" "Class" b
class ${1:Name} {
	constructor(${2:arg}) {
		$3
	}
	$4
}
endsnippet

# snippet {}
# (${1}) => {
# 	${2}
# }
# endsnippet

#### REACT
# React class
snippet rcla
class ${1:MyComponent} extends Component {
	render() {
		return (
			${0:<div></div>}
		)
	}
}
endsnippet


# React constructor
snippet rcon
constructor(${1:props}) {
	super($1);

	this.state = {
		$0
	};
}
endsnippet

# # Proptypes for React Class
# snippet rcpt
# 	static propTypes = {
# 		${1}: PropTypes.${0},
# 	}

# # Default props for React Class
# snippet rcdp
# 	static defaultProps = {
# 		${1}: ${0},
# 	}

# # Presentational component
# snippet rcom
# 	props => {
# 		return (
# 			${0:<div></div>}
# 		)
# 	}

snippet expa "Export arrow function" b
export const ${1:default} = (${2:args}) => ${3:{$0}};
endsnippet

snippet expf "Export function" b
export ${1:default }function ${2:name}($3) {
	$4
};
endsnippet

snippet expd "Export function" b
export default ${1:varName};
endsnippet

snippet "e(xport|xp|x)?" "export" br
export ${1:varName};
endsnippet


snippet setf "Set State with function" b
this.setState(${1:(prevState, prevProps)} => {
	$2
}, ${3:callback});
endsnippet

snippet seto "Set State with object" b
this.setState({$1}, ${2:callback});
endsnippet

snippet rfcs "React component function - SIMPLE"
import React from 'react';
import './${2:${1/([a-z]*)([A-Z]+)/(?1:$1-)\L$2\E/g}}${3:.styles.scss}';

const ${1:MyComponent} = (${4:props}) => (
	<div className='$2'>$0</div>
);

export default $1;
endsnippet

snippet rcc "React Class Component" b
import React, { Component } from 'react';
import './${2:$1}.styles.scss';

class ${1:`!v expand('%:t:r')`} extends Component {
	constructor(props) {
		super(props);
	}

	render() {
		return (
			<${3:div} className={$1}>
				$0
			</$3>
		);
	}
}

export default $1;
endsnippet

snippet cn "className"
className='$1'
endsnippet


### LESS priority, second option
priority -50
snippet "const " "const" riA
const ${1} = ${2}
endsnippet

snippet "let " "let" riA
let ${1} = ${2}
endsnippet


